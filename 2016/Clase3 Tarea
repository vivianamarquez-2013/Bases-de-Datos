POSTGRES



CREATE TABLE factura
( cod_factura numeric,
  cod_cliente numeric,
  val_factura numeric,
  PRIMARY KEY (cod_factura)
);

CREATE TABLE VENDEDOR
( cod_vendedor numeric,
  nom_vendedor text,
  PRIMARY KEY (cod_vendedor)
);

CREATE TABLE CIUDAD
( cod_ciudad numeric,
  nom_ciudad text,
  PRIMARY KEY (cod_ciudad)
);

CREATE TABLE F_PAGO
( cod_f_pago numeric,
  nom_f_pago text,
  PRIMARY KEY (cod_f_pago)
);

CREATE TABLE CLIENTE
( cod_cliente numeric,
  nom_cliente text,
  cod_vendedor numeric,
  cod_ciudad numeric,
  cod_f_pago numeric,
  PRIMARY KEY (cod_cliente)
);

ALTER TABLE FACTURA
  add CONSTRAINT cod_cliente_fk
  FOREIGN KEY (cod_cliente)
  REFERENCES CLIENTE(cod_cliente)
;

ALTER TABLE CLIENTE
  add CONSTRAINT cod_vendedor_fk
  FOREIGN KEY (cod_vendedor)
  REFERENCES VENDEDOR(cod_vendedor)
;

ALTER TABLE CLIENTE
  add CONSTRAINT cod_ciudad_fk
  FOREIGN KEY (cod_ciudad)
  REFERENCES CIUDAD(cod_ciudad)
;

ALTER TABLE CLIENTE
  add CONSTRAINT cod_f_pago_fk
  FOREIGN KEY (cod_f_pago)
  REFERENCES F_PAGO(cod_f_pago)
;

INSERT INTO VENDEDOR (cod_vendedor, nom_vendedor)
   VALUES(1,'Sandra');

INSERT INTO VENDEDOR (cod_vendedor, nom_vendedor)
   VALUES(2,'Claudia');

INSERT INTO VENDEDOR (cod_vendedor, nom_vendedor)
   VALUES(3,'Yamyle');
   
INSERT INTO CIUDAD (cod_ciudad, nom_ciudad)
   VALUES(1,'Bogotá');

INSERT INTO CIUDAD (cod_ciudad, nom_ciudad)
   VALUES(2,'Medellín');

INSERT INTO CIUDAD (cod_ciudad, nom_ciudad)
   VALUES(3,'Calí');
   
INSERT INTO F_PAGO (cod_f_pago, nom_f_pago)
   VALUES(1,'Crédito');

INSERT INTO F_PAGO (cod_f_pago, nom_f_pago)
   VALUES(2,'Contado');

INSERT INTO CLIENTE (cod_cliente, nom_cliente, cod_vendedor, cod_ciudad, cod_f_pago)
   VALUES(1,'Juan',1,3,1);

INSERT INTO CLIENTE (cod_cliente, nom_cliente, cod_vendedor, cod_ciudad, cod_f_pago)
   VALUES(2,'José',2,3,2);

INSERT INTO CLIENTE (cod_cliente, nom_cliente, cod_vendedor, cod_ciudad, cod_f_pago)
   VALUES(3,'Julio',3,2,1);

INSERT INTO CLIENTE (cod_cliente, nom_cliente, cod_vendedor, cod_ciudad, cod_f_pago)
   VALUES(4,'Jaime',2,2,1);

INSERT INTO CLIENTE (cod_cliente, nom_cliente, cod_vendedor, cod_ciudad, cod_f_pago)
   VALUES(5,'Jairo',1,1,2);
   
INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(1,1,1000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(2,2,2000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(3,3,3000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(4,4,4000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(5,5,5000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(6,1,1000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(7,2,2000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(8,3,3000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(9,4,4000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(10,5,5000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(11,1,1000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(12,2,2000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(13,3,3000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(14,4,4000);

INSERT INTO FACTURA(cod_factura, cod_cliente, val_factura)
   VALUES(15,5,5000);



-----FUNCIÓN IMPRIMIR

create function imprimir(text) returns void as 
$$ begin raise notice '%', $1; end 
$$ language plpgsql; 

SELECT imprimir('Hello mundo! :-)');

-----Ventas por vendedor WHILE

CREATE OR REPLACE FUNCTION VXV() RETURNS void AS $$
DECLARE
  cursor_vxv CURSOR 
  IS
  SELECT nom_vendedor nombre, sum(val_factura) total_ventas
  FROM VENDEDOR, CLIENTE, FACTURA
  WHERE
      VENDEDOR.cod_vendedor=CLIENTE.cod_vendedor AND
      CLIENTE.cod_cliente=FACTURA.cod_cliente
  GROUP BY ROLLUP (nombre);
  registro RECORD;
BEGIN
  OPEN CURSOR_VXV;
         FETCH CURSOR_VXV INTO REGISTRO;
         WHILE registro NOTNULL LOOP
              RAISE NOTICE '% --> %', REGISTRO.nombre, REGISTRO.total_ventas;
              FETCH CURSOR_VXV INTO REGISTRO;
         END LOOP;
     CLOSE CURSOR_VXV;
END;
$$ LANGUAGE plpgsql;

SELECT VXV();

-----Ventas por forma de pago LOOP

CREATE OR REPLACE FUNCTION VXFP() RETURNS void AS $$
DECLARE
  cursor_vxfp CURSOR 
  IS
  SELECT nom_f_pago nombre, sum(val_factura) total_ventas
  FROM F_PAGO, CLIENTE, FACTURA
  WHERE
      F_PAGO.cod_f_pago=CLIENTE.cod_f_pago AND
      CLIENTE.cod_cliente=FACTURA.cod_cliente
  GROUP BY ROLLUP (nombre);
  registro RECORD;
BEGIN
  OPEN CURSOR_VXFP;
         LOOP
         FETCH CURSOR_VXFP INTO REGISTRO;
         EXIT WHEN NOT FOUND;
         RAISE NOTICE '% --> %', REGISTRO.nombre, REGISTRO.total_ventas;
         END LOOP;
     CLOSE CURSOR_VXFP;
END;
$$ LANGUAGE plpgsql;

SELECT VXFP();

-----Ventas por vendedor por forma de pago LOOP

CREATE OR REPLACE FUNCTION VXVXFP() RETURNS void AS $$
DECLARE
  cursor_vxvxfp CURSOR 
  IS
  SELECT nom_vendedor nombre, nom_f_pago, sum(val_factura) total_ventas
  FROM F_PAGO, CLIENTE, FACTURA, VENDEDOR
  WHERE
      F_PAGO.cod_f_pago = CLIENTE.cod_f_pago AND
      CLIENTE.cod_cliente = FACTURA.cod_cliente AND
      VENDEDOR.cod_vendedor = CLIENTE.cod_vendedor
  Group by nombre, nom_f_pago
  order by sum(val_factura) desc;
  registro RECORD;
BEGIN
  OPEN CURSOR_VXVXFP;
         LOOP
         FETCH CURSOR_VXVXFP INTO REGISTRO;
         EXIT WHEN NOT FOUND;
         RAISE NOTICE '% --> % --> %', REGISTRO.nombre, REGISTRO.total_ventas, REGISTRO.nom_f_pago;
         END LOOP;
     CLOSE CURSOR_VXVXFP;
END;
$$ LANGUAGE plpgsql;

SELECT VXVXFP();

-----Ventas por vendedor FOR (Forma de pago dada)

CREATE OR REPLACE FUNCTION VXV2(f_pago_dado) RETURNS void AS $$
DECLARE
  cursor_vxv2 CURSOR 
  IS
  SELECT nom_vendedor nombre, sum(val_factura) total_ventas, nom_f_pago
  FROM VENDEDOR, CLIENTE, FACTURA, F_PAGO
  WHERE
      VENDEDOR.cod_vendedor=CLIENTE.cod_vendedor AND
      CLIENTE.cod_cliente=FACTURA.cod_cliente AND
      F_PAGO.cod_f_pago = CLIENTE.cod_f_pago AND
      F_PAGO.cod_f_pago=f_pago_dado
  GROUP BY ROLLUP (nombre);
  registro RECORD;
BEGIN
  OPEN CURSOR_VXV2;
         FOR REGISTRO IN CURSOR_VXV2 LOOP
              RAISE NOTICE '% --> % --> %', REGISTRO.nom_f_pago, REGISTRO.nombre, REGISTRO.total_ventas;
         END LOOP;
     CLOSE CURSOR_VXV2;
END;
$$ LANGUAGE plpgsql;

SELECT VXV2();

-----Ventas por ciudad WHILE

CREATE OR REPLACE FUNCTION VXC() RETURNS void AS $$
DECLARE
  cursor_vxc CURSOR 
  IS
  SELECT nom_ciudad nombre, sum(val_factura) total_ventas
  FROM CIUDAD, CLIENTE, FACTURA
  WHERE
      CIUDAD.cod_ciudad=CLIENTE.cod_ciudad AND
      CLIENTE.cod_cliente=FACTURA.cod_cliente
  GROUP BY ROLLUP (nombre);
  registro RECORD;
BEGIN
  OPEN CURSOR_VXC;
         FETCH CURSOR_VXC INTO REGISTRO;
         WHILE registro NOTNULL LOOP
              RAISE NOTICE '% --> %', REGISTRO.nombre, REGISTRO.total_ventas;
              FETCH CURSOR_VXC INTO REGISTRO;
         END LOOP;
     CLOSE CURSOR_VXc;
END;
$$ LANGUAGE plpgsql;

SELECT VXC();
